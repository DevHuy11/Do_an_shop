//


///For animation image in header

const [y, setY] = useState(window.scrollY);

const handleNavigation = useCallback(
  (e) => {
    const window = e.currentTarget;
    if (y > window.scrollY) {
      console.log("scrolling up");
    } else if (y < window.scrollY) {
      console.log("scrolling down");
    }
    setY(window.scrollY);
  },
  [y]
);

useEffect(() => {
  setY(window.scrollY);
  window.addEventListener("scroll", handleNavigation);

  return () => {
    window.removeEventListener("scroll", handleNavigation);
  };
}, [handleNavigation]);




const { username, email, password } = req.body;
const oldUser = await User.findOne({ email });

if (!username || !email || !password)
  res.json({ success: false, msg: "Please fill in the field!" });
if (password.length < 8)
  res.json({
    success: false,
    msg: "Your password must be more 8 character !",
  });
if (!/^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/.test(email))
  res.json({ success: false, msg: "Email is invalid !" });
if (oldUser) res.json({ success: false, msg: "Account already exists !" });

const newRefreshToken = RefreshToken(email);
bcrypt.hash(password, 12, async (err, hash) => {
  const hashPassword = hash;

  const newUser = new User({
    username: username,
    email: email,
    password: hashPassword,
    refresToKen: newRefreshToken,
  });
  await newUser.save();
  res.json({ success: true, msg: "Create account sucessfully !!" });
});